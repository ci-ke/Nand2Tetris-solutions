function Math.init 2
push constant 16
pop static 1
push static 1
call Array.new 1
pop static 0
push constant 1
pop local 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push static 1
lt
not
if-goto WHILE_END0
push local 0
push static 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
return
label IF_FALSE0
push argument 0
return
function Math.multiply 3
push constant 0
pop local 1
push argument 0
pop local 2
label WHILE_EXP0
push local 0
push static 1
lt
not
if-goto WHILE_END0
push argument 1
push local 0
call Math.bit 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push local 2
add
pop local 1
label IF_FALSE0
push local 2
push local 2
add
pop local 2
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Math.bit 1
push argument 0
push argument 1
push static 0
add
pop pointer 1
push that 0
and
pop local 0
push local 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
not
return
function Math.divide 2
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 3
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
pop local 0
goto IF_END1
label IF_FALSE1
push constant 0
pop local 0
label IF_END1
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math.divide_pos 2
pop local 1
push local 0
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 1
neg
pop local 1
label IF_FALSE2
push local 1
return
function Math.divide_pos 4
push argument 1
push argument 0
gt
push argument 1
push constant 0
lt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 1
push argument 1
add
pop local 0
push argument 0
push local 0
call Math.divide_pos 2
pop local 3
push local 3
push local 3
add
pop local 1
push local 0
push local 3
call Math.multiply 2
pop local 2
push argument 0
push local 2
sub
push argument 1
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
return
goto IF_END1
label IF_FALSE1
push local 1
push constant 1
add
return
label IF_END1
function Math.sqrt 4
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
call Sys.error 1
pop temp 0
label IF_FALSE0
push static 1
push constant 2
call Math.divide 2
push constant 1
sub
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 0
push constant 1
neg
gt
not
if-goto WHILE_END0
push local 1
push local 0
push static 0
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
lt
push local 3
push argument 0
eq
or
push local 3
push constant 0
gt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
pop local 1
label IF_FALSE1
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 1
return
