// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int max_len, cur_len;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength<0){
            do Sys.error(14); // Maximum length must be non-negative
        }
        let max_len=maxLength;
        let cur_len=0;
        if(maxLength=0){
            return this;
        }
        let chars=Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return cur_len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if((j>-1)|(j<cur_len)){
            return chars[j];
        }
        else{
            do Sys.error(15); // String index out of bounds
            return 0;
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if((j>-1)|(j<cur_len)){
            let chars[j]=c;
            return;
        }
        else{
            do Sys.error(16); // String index out of bounds
            return;
        }
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(cur_len=max_len){
            do Sys.error(17); // String is full
        }
        let chars[cur_len]=c;
        let cur_len=cur_len+1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(cur_len=0){
            do Sys.error(18); //String is empty
        }
        let cur_len=cur_len-1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, ch, num;
        var String sub;
        var boolean is_neg;

        let sub="-";
        let ch=charAt(0);
        if(ch=sub.charAt(0)){
            let is_neg=true;
            let i=1;
        }
        else{
            let is_neg=false;
            let i=0;
        }
        do sub.dispose();

        let val=0;
        while(i<cur_len){
            let ch=charAt(i);
            if((ch<48)|(ch>57)){
                return val;
            }
            let num=ch-48;
            let val=(val*10)+num;
            let i=i+1;
        }

        if(is_neg){
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i, num, ch;
        var boolean is_neg;
        var String sub;
        var Array store;

        let cur_len=0;

        let store=Array.new(max_len);
        let i=0;

        if(val<0){
            let is_neg=true;
            let val=-val;
        }
        else{
            let is_neg=false;
        }

        while(val>0){
            if(is_neg){
                if(i>(max_len-2)){
                    do Sys.error(19); // Insufficient string capacity
                }
            }
            else{
                if(i>(max_len-1)){
                    do Sys.error(19); // Insufficient string capacity
                }
            }

            let num=val-(10*(val/10));
            let ch=num+48;
            let store[i]=ch;
            let i=i+1;
            let val=val/10;
        }

        if(is_neg){
            let sub="-";
            do appendChar(sub.charAt(0));
            do sub.dispose();
        }

        let i=i-1;
        while(i>-1){
            do appendChar(store[i]);
            let i=i-1;
        }

        do store.dispose();

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
