// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Control Unit START
    DMux(in=true, sel=instruction[15], a=Acode, b=Ccode, a=selInsToA); //A or C

    Or(a=instruction[12], b=false, out=selMtoALU); //a

    Or(a=instruction[11], b=false, out=ALUzx); //c1
    Or(a=instruction[10], b=false, out=ALUnx); //c2
    Or(a=instruction[9], b=false, out=ALUzy); //c3
    Or(a=instruction[8], b=false, out=ALUny); //c4
    Or(a=instruction[7], b=false, out=ALUf); //c5
    Or(a=instruction[6], b=false, out=ALUno); //c6

    Or(a=Acode, b=instruction[5], out=Aload); //d1
    And(a=Ccode, b=instruction[4], out=Dload); //d2
    And(a=Ccode, b=instruction[3], out=writeM); //d3

    Or(a=ALUzr, b=ALUng, out=ALUzrng);
    Not(in=ALUzrng, out=ALUpo);
    And(a=instruction[2], b=ALUng, out=ngjmp); //j1
    And(a=instruction[1], b=ALUzr, out=zrjmp); //j2
    And(a=instruction[0], b=ALUpo, out=pojmp); //j3

    Or(a=ngjmp, b=zrjmp, out=ngzrjmp);
    Or(a=ngzrjmp, b=pojmp, out=PCloadifC);
    And(a=Ccode, b=PCloadifC, out=PCload);
    // Control Unit END

    // Data Path START
    Mux16(a=ALUout, b=instruction, sel=selInsToA, out=Ain);
    ARegister(in=Ain, load=Aload, out=Aout, out[0..14]=addressM);
    DRegister(in=ALUout, load=Dload, out=Dout);

    Mux16(a=Aout, b=inM, sel=selMtoALU, out=ALUin);
    ALU(
        x=Dout, y=ALUin, zx=ALUzx, nx=ALUnx, zy=ALUzy, ny=ALUny, f=ALUf, no=ALUno,
        out=ALUout, out=outM, zr=ALUzr, ng=ALUng
    );

    PC(in=Aout, load=PCload, inc=true, reset=reset, out[0..14]=pc);
    // Data Path END
}
